
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        @if (!IconMenuActive)
        {
            <img src="images/favicon.png" />
            <a class="navbar-brand" href="">OSiRIS</a>
        }
        else
        {
            <img src="favicon.png"/>
            //a class="navbar-brand bi bi-window-fullscreen" />
        }
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon" ></span>
        </button>
    </div>
</div>


<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house" aria-hidden="true"></span>
                @if (!IconMenuActive)
                {
                    <span><label>Home</label></span>
                }
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Datasets">
                <span class="bi bi-folder" aria-hidden="true"></span>
                @if (!IconMenuActive)
                {
                    <span><label>Datasets</label></span>
                }
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="ClassicMode">
                <span class="bi bi-gear-wide-connected" aria-hidden="true"></span>
                @if (!IconMenuActive)
                {
                    <span><label>Classic mode</label></span>
                }
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="log">
                <span class="bi bi-list-columns-reverse" aria-hidden="true"></span>
                @if (!IconMenuActive)
                {
                    <span><label>Log</label></span>
                }
            </NavLink>
        </div>
    </nav>
    
</div>

<div class="bottom-row">
    <div class="icon-menu-arrow">
        @if (!IconMenuActive)
        {
            <span class="bi bi-arrow-bar-left" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
        else
        {
            <span class="bi bi-arrow-bar-right" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
    </div>
</div>


@code
{
    [Parameter]
    public EventCallback<bool> ShowIconMenu { get; set; }

    private bool IconMenuActive { get; set; } = false;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private Dictionary<string, bool> subMenuStates = new Dictionary<string, bool>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    await JSRuntime.InvokeVoidAsync("setResizeCallback", DotNetObjectReference.Create(this));
        //}
    }

    [JSInvokable]
    public async Task OnResize(bool isBelowThreshold)
    {
        if (isBelowThreshold && IconMenuActive)
        {
            collapseNavMenu = true;
            await ToggleIconMenu();

            await ShowIconMenu.InvokeAsync(IconMenuActive);

            await InvokeAsync(StateHasChanged);
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task ToggleIconMenu()
    {
        IconMenuActive = !IconMenuActive;

        await ShowIconMenu.InvokeAsync(IconMenuActive);
    }

    private void ToggleSubMenu(string subMenuKey)
    {
        if (subMenuStates.ContainsKey(subMenuKey) && subMenuStates[subMenuKey])
        {
            subMenuStates[subMenuKey] = false;
        }
        else
        {
            foreach (var key in subMenuStates.Keys.ToList())
            {
                subMenuStates[key] = false;
            }

            if (subMenuStates.ContainsKey(subMenuKey))
            {
                subMenuStates[subMenuKey] = !subMenuStates[subMenuKey];
            }
            else
            {
                subMenuStates[subMenuKey] = true;
            }
        }
    }

    private bool IsSubMenuOpen(string subMenuKey)
    {
        return subMenuStates.ContainsKey(subMenuKey) && subMenuStates[subMenuKey];
    }
}